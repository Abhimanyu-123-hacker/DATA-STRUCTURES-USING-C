#include<stdio.h>
#include<stdlib.h>
#define SIZE 100
typedef struct priorityQueue{
    int element;
    int priority;
}PQueue;
PQueue pq[SIZE];
int  front=-1,rear=-1;
int isEmpty(){
    return ( front==-1 )? 1:0;
}
int isFull(){
    return(rear == SIZE-1)? 1:0;

}
void enqueue(int data,int priority){
    if(isempty()){
    rear=rear+1;
    pq[rear].element=data;
    pq[rear].priority=priority;
    front =rear;}
    else{
        int i;
        for(i=0;i<=rear;i++){
            if(pq[i].priority<priority){
                for(int j=rear;j>=i;j--){
                    pq[j+1].element=pq[j].element;
                    pq[j+1].priority=pq[j].priority;
                }
                pq[i].element=data;
                pq[i].priority=priority;
                rear++;
                break;
            }

                }
    }
printf("element inserted");
   
   
}
int getHigherpriorityelement(){
    int max=0,index=-1;
    for(int i=front ;i<=rear;i++){
        if(pq[i].priority>max){
            max=pq[i].priority;
            index=i;
        }

    }
    return index;
}
int dequeue(){
    int data=pq[front].element;
    if(front==rear)
    front=rear-1;
    else
    front=front+1;
    return data;
}
int peek (){
    int i= getHigherpriorityelement();
    printf("elements : %d +> priority : %d",pq[i].element);
    
}
void display(){
    printf("elements of priority queue are:\n");
    for(int i=front;i<=rear;i++){
        printf("elements:%d => priority : %d\n" ,pq[i].element,pq[i].priority);
    }
   
    }
int main(){
    printf("1.enqueue\n");
    printf("2.dequeue\n");
    printf("3.peek\n");
    printf("4.display\n");
    printf("5.exit\n");
    int choice,data,p;
    printf("enter choice :");
    scanf("%d",&choice);
    switch(choice){
        case 1:
        if (isFull())
        printf("queue overflow!!!!!\n");
        else {
            printf("enter elements :");
            scanf("%d",&data);
            printf("enter priority :");
            scanf("%d",&p);
            enqueue(data,p);
        }
        break;
        case 2:
        if(isEmpty())
        printf("queue underflow !!!!\n");
        else{
            printf("%d dequeue from the queue\n",dequeue());
        } 
        break;
        case 3:
        if(isEmpty())
        printf(" Prioirty queue is empty !!!!\n");
        else
        printf("%d element available at front is %d\n",peek());

        break;
        case 4:
        if(isEmpty())
        printf("queue is empty  !!!!\n");
        else
        display();
        break;
        case 5:
        exit(0);
        default:
        printf("invalid choice !!!!\n");

    }
    printf("\n");
    return 0;
}
